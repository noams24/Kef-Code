generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum voteType {
  LIKE
  DISLIKE
}

enum Status {
  BEGIN
  ONGOING
  STUCK
  FINISH
}

enum UserRole {
  USER
  COADMIN
  ADMIN
}

enum SubscriptionType {
  MONTH
  YEAR
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model User {
  id                  String                @id @default(cuid())
  name                String?
  email               String?               @unique
  emailVerified       DateTime?
  username            String?               @unique
  image               String?
  subscription        Subscription?
  subscriptionHistory SubscriptionHistory[]
  role                UserRole              @default(USER)
  posts               Post[]
  sessions            Session[]
  Comment             Comment[]
  votes               Vote[]
  bookmarks           Bookmark[]
  submissions         Submissions[]
  problemStatus       problemStatus[]
  accounts            Account[]
  problemsneedverify  problemsneedverify[]
  solutions Solution[]
}

model Subscription {
  id               String           @id @default(cuid())
  subscriptionType SubscriptionType
  startDate        DateTime         @default(now())
  endDate          DateTime
  amount           Float
  userId           String           @unique
  user             User             @relation(fields: [userId], references: [id])
}

model SubscriptionHistory {
  id               String           @id @default(cuid())
  subscriptionType SubscriptionType
  startDate        DateTime
  endDate          DateTime
  amount           Float
  userId           String           @unique
  user             User             @relation(fields: [userId], references: [id])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Post {
  id        String    @id @default(cuid())
  title     String
  content   Json?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  authorId  String
  author    User      @relation(fields: [authorId], references: [id])
  course    String
  comments  Comment[]
  Vote      Vote[]

  @@index([authorId])
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String?
  problem   Problem? @relation(fields: [problemId], references: [id], onDelete: Cascade)
  problemId Int?

  replyToId     String?
  replyTo       Comment?     @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  replies       Comment[]    @relation("ReplyTo")
  commentId     String?
  Submissions   Submissions? @relation(fields: [submissionsId], references: [id], onDelete: Cascade)
  submissionsId String?
  Solutions     Solution?    @relation(fields: [solutionId], references: [id], onDelete: Cascade)
  solutionId    String?
  votes         Vote[]

  @@index([authorId])
  @@index([postId])
  @@index([problemId])
  @@index([replyToId])
  @@index([submissionsId])
  @@index([solutionId])
}

model Problem {
  id            Int             @id @default(autoincrement())
  course        String
  chapter       String
  title         String
  img           String
  difficulty    String
  hint          String?
  solution      Solution?
  comments      Comment[]
  Submissions   Submissions[]
  problemStatus problemStatus[]
  vote          Vote[]
  bookmarks     Bookmark[]

  @@unique([course, chapter, title])
}

model Solution {
  id        String    @id @default(cuid())
  problemId Int       @unique
  problem   Problem   @relation(fields: [problemId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  videoUrl  String?
  content   Json?
  userId    String?
  user      User?      @relation(fields: [userId], references: [id])
  isPremium Boolean
  comments  Comment[]
  votes     Vote[]
  
  @@index([userId])
}

model Submissions {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  problemId Int
  problem   Problem   @relation(fields: [problemId], references: [id])
  content   Json
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isPublic  Boolean
  videoUrl  String?
  comments  Comment[]
  votes     Vote[]

  @@index([userId])
  @@index([problemId])
}

model Vote {
  id           String       @id @default(cuid())
  type         voteType
  userId       String
  user         User         @relation(fields: [userId], references: [id])
  problemId    Int?
  problem      Problem?     @relation(fields: [problemId], references: [id])
  postId       String?
  post         Post?        @relation(fields: [postId], references: [id], onDelete: Cascade)
  Comment      Comment?     @relation(fields: [commentId], references: [id])
  commentId    String?
  SubmissionId String?
  Submission   Submissions? @relation(fields: [SubmissionId], references: [id])
  SolutionId   String?
  Solution     Solution?    @relation(fields: [SolutionId], references: [id])

  @@index([userId])
  @@index([problemId])
  @@index([postId])
  @@index([commentId])
  @@index([SubmissionId])
  @@index([SolutionId])
}

model Bookmark {
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  problemId Int
  problem   Problem? @relation(fields: [problemId], references: [id])

  @@id([problemId, userId])
  @@index([userId])
  @@index([problemId])
}

model problemStatus {
  problemId Int
  problem   Problem @relation(fields: [problemId], references: [id])
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  status    Status  @default(BEGIN)

  @@unique([problemId, userId])
  @@index([userId])
}

model problemsneedverify {
  id         String   @id @default(cuid())
  course     String
  chapter    String
  title      String
  img        String
  difficulty String
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())

  @@index([userId])
}
